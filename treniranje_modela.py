# -*- coding: utf-8 -*-
"""tensorflow_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10HocQElQ9EzoQ6MQNHG_nATh7BytzDOO
"""

import tensorflow as tf # Import tensorflow library
import matplotlib.pyplot as plt # Import matplotlib library
import numpy as np
import os
import cv2

mnist = tf.keras.datasets.mnist # Object of the MNIST dataset
(x_train, y_train),(x_test, y_test) = mnist.load_data() # Load data

plt.imshow(x_test[1], cmap="gray") # Import the image
plt.show() # Plot the image

# Normalize the train dataset
x_train = tf.keras.utils.normalize(x_train, axis=1)
# Normalize the test dataset
x_test = tf.keras.utils.normalize(x_test, axis=1)

#Build the model object
model = tf.keras.models.Sequential()
# Add the Flatten Layer
model.add(tf.keras.layers.Flatten())
# Build the input and the hidden layers
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
# Build the output layer
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

# Compile the model
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

model.fit(x=x_train, y=y_train, epochs=5) # Start training process

# Evaluate the model performance
test_loss, test_acc = model.evaluate(x=x_test, y=y_test)
# Print out the model accuracy 
print('\nTest accuracy:', test_acc)

predictions = model.predict([x_test]) # Make prediction

print(np.argmax(predictions[905])) # Print out the number

plt.imshow(x_test[905], cmap="gray") # Import the image
plt.show() # Show the image

from tensorflow.keras.models import Sequential, save_model, load_model

# Save the model
filepath = F"/content/drive/My Drive/saved_model"
save_model(model, filepath)

# Load the model
model = load_model(filepath, compile = True)

img = cv2.imread("/digits/digit3.png")[:,:,0]
img = np.invert(np.array([img]))

# Generate predictions for samples
predictions = model.predict(img)
print(predictions)

# Generate arg maxes for predictions
classes = np.argmax(predictions, axis = 1)
print(classes)